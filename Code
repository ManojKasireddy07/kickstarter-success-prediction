# ------------------------------------------
# Phase 1: Kickstarter Success Prediction
# Logistic Regression Baseline Model
# ------------------------------------------

# Load required libraries
install.packages("tidyverse") # Only if not installed
library(tidyverse)
library(dplyr)

# Convert selected columns to factors
cols_to_factor <- c("creator_name", "location_slug", "location_type", "region",
                    "category_parent", "category_name", "isTextPic", "isLogoPic",
                    "isCalendarPic", "isDiagramPic", "isShapePic", "contains_youtube")

# Define function to compute average reward amount from comma-separated string
clean_and_average <- function(reward_str) {
  if (is.na(reward_str) || reward_str == "") return(NA)
  reward_values <- strsplit(reward_str, ",")[[1]]
  numeric_rewards <- as.numeric(gsub("[^0-9.]", "", reward_values))
  mean(numeric_rewards, na.rm = TRUE)
}

# --------------------
# Load and preprocess data
# --------------------
train_x <- read_csv("ks_training_X.csv", show_col_types = FALSE)
train_y <- read_csv("ks_training_y.csv", show_col_types = FALSE)
test_x  <- read_csv("ks_test_X.csv", show_col_types = FALSE)

# Convert date columns
train_x$launched_at <- as.Date(train_x$launched_at, format="%Y-%m-%d")
train_x$deadline    <- as.Date(train_x$deadline, format="%Y-%m-%d")
train_x$created_at  <- as.Date(train_x$created_at, format="%Y-%m-%d")

# Handle missing values and create new features for training
train_x <- train_x %>%
  mutate_if(is.character, ~replace_na(., "Unknown")) %>%
  mutate_if(is.numeric,  ~replace_na(., median(., na.rm = TRUE))) %>%
  mutate(across(all_of(cols_to_factor), as.factor)) %>%
  mutate_if(is.logical, ~replace_na(., FALSE)) %>%
  mutate_if(is.logical, as.factor) %>%
  mutate(
    duration          = as.numeric(deadline - launched_at),
    preparation       = as.numeric(launched_at - created_at),
    blurb_length      = nchar(as.character(blurb)),
    tag_names_length  = nchar(as.character(tag_names)),
    reward__length    = nchar(as.character(reward_descriptions)),
    avg_reward_amount = sapply(as.character(reward_amounts), clean_and_average)
  )

# Apply similar preprocessing to test data
test_x <- test_x %>%
  mutate_if(is.character, ~replace_na(., "Unknown")) %>%
  mutate_if(is.numeric,  ~replace_na(., median(., na.rm = TRUE))) %>%
  mutate(across(all_of(cols_to_factor), as.factor)) %>%
  mutate_if(is.logical, ~replace_na(., FALSE)) %>%
  mutate_if(is.logical, as.factor) %>%
  mutate(
    duration          = as.numeric(deadline - launched_at),
    preparation       = as.numeric(launched_at - created_at),
    blurb_length      = nchar(as.character(blurb)),
    tag_names_length  = nchar(as.character(tag_names)),
    reward__length    = nchar(as.character(reward_descriptions)),
    avg_reward_amount = sapply(as.character(reward_amounts), clean_and_average)
  )

# Merge training features with target variable
train_success <- train_x %>%
  left_join(train_y, by = "id") %>%
  mutate(success = as.factor(success))

# --------------------
# Build logistic regression model
# --------------------
logistic_success <- glm(success ~ creator_name + location_slug + location_type + region + goal +
  blurb_length + duration + preparation + numfaces_project + numfaces_creator + male_project +
  female_project + smiling_project + smiling_creator + minage_project + minage_creator +
  sentence_counter + avgsentencelength + avgsyls + grade_level + afinn_pos + afinn_neg +
  ADV + NOUN + ADP + PRT + DET + PRON + VERB + NUM + CONJ + ADJ + num_words +
  avg_wordlengths + isTextPic + isLogoPic + isCalendarPic + isDiagramPic + isShapePic +
  contains_youtube + tag_names_length + reward__length + avg_reward_amount + category_name +
  maxage_project + maxage_creator,
  data = train_success, family = "binomial")

# --------------------
# Predict and classify test data
# --------------------
probs_success <- predict(logistic_success, newdata = test_x, type = "response")
classifications_success <- ifelse(probs_success > 0.49, "YES", "NO")
classifications_success <- ifelse(is.na(classifications_success), "NO", classifications_success)

# Output predictions in required format
write.table(classifications_success, "success_group010.csv", row.names = FALSE)
